{"version":3,"file":"static/js/999.3b04b43a.chunk.js","mappings":"qWAoBMA,EAAYC,EAAAA,KAAaC,MAAM,CACjCC,MAAOF,EAAAA,KAAaE,MAAM,iBAAiBC,SAAS,0BACpDC,SAAUJ,EAAAA,KAAaK,IAAI,EAAG,cAAcF,SAAS,4BAI5CG,EAAY,WACrB,IAAAC,EAAwCC,EAAAA,UAAe,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAC9BI,GAAWC,EAAAA,EAAAA,MAGXC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXf,MAAO,GACPE,SAAU,IAEdc,iBAAkBnB,EAClBoB,SAAU,SAACC,GACPP,GAASQ,EAAAA,EAAAA,IAAMD,IACfL,EAAOO,WACX,IAcJ,OACIC,EAAAA,EAAAA,KAAA,OAAAC,UAEQC,EAAAA,EAAAA,MAAA,QAAMN,SAAUJ,EAAOW,aAAcC,aAAa,MAAKH,SAAA,EAEnDD,EAAAA,EAAAA,KAACK,EAAAA,EAAS,CACNC,WAAS,EACTC,GAAG,QACHC,KAAK,QACLC,MAAM,QACNC,QAAQ,WACRC,OAAO,SACPC,MAAOpB,EAAOK,OAAOlB,MACrBkC,SAAUrB,EAAOsB,aACjBC,OAAQvB,EAAOwB,WACfC,MAAOzB,EAAO0B,QAAQvC,OAASwC,QAAQ3B,EAAO4B,OAAOzC,OACrD0C,WAAY7B,EAAO0B,QAAQvC,OAASa,EAAO4B,OAAOzC,SAItDuB,EAAAA,EAAAA,MAACoB,EAAAA,EAAW,CAACZ,QAAQ,WAAWJ,WAAS,EAACK,OAAO,SAAQV,SAAA,EACrDD,EAAAA,EAAAA,KAACuB,EAAAA,EAAU,CAACC,QAAQ,8BAA6BvB,SAAC,cAClDD,EAAAA,EAAAA,KAACyB,EAAAA,EAAa,CACVlB,GAAG,WACHC,KAAK,WACLkB,KAAMtC,EAAe,OAAS,WAC9BwB,MAAOpB,EAAOK,OAAOhB,SACrBgC,SAAUrB,EAAOsB,aACjBC,OAAQvB,EAAOwB,WACfC,MAAOzB,EAAO0B,QAAQrC,UAAYsC,QAAQ3B,EAAO4B,OAAOvC,UACxD8C,cACI3B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAc,CAACC,SAAS,MAAK5B,UAC1BD,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CACP,aAAW,6BACXC,QA1CJ,WAAH,OAAS1C,GAAgB,SAAC2C,GAAI,OAAMA,CAAI,GAAE,EA2CnCC,YAzCJ,SAACC,GAC7BA,EAAMC,gBACV,EAwCoCC,KAAK,MAAKnC,SAETb,GAAeY,EAAAA,EAAAA,KAACqC,EAAAA,EAAa,KAAMrC,EAAAA,EAAAA,KAACsC,EAAAA,EAAU,QAI3D7B,MAAM,aAETjB,EAAO0B,QAAQrC,UAAYW,EAAO4B,OAAOvC,WACtCmB,EAAAA,EAAAA,KAAA,OAAAC,SAAMT,EAAO4B,OAAOvC,eAI5BmB,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,CAACb,KAAK,SAAShB,QAAQ,YAAY8B,SAASxC,EAAAA,EAAAA,KAACyC,EAAAA,EAAQ,IAAKnC,WAAS,EAAAL,SAAC,eAO/F,ECzGe,SAASyC,IACpB,OACIxC,EAAAA,EAAAA,MAAAyC,EAAAA,SAAA,CAAA1C,SAAA,EAEID,EAAAA,EAAAA,KAAA,MAAAC,SAAI,YACJD,EAAAA,EAAAA,KAACjB,EAAS,MAGtB,C","sources":["components/LoginForm/LoginForm.jsx","pages/LoginFormPage.jsx"],"sourcesContent":["\n\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\n\nimport * as Yup from 'yup';\nimport { logIn } from '../../redux/auth/operations';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport FormControl from '@mui/material/FormControl';\nimport * as React from 'react';\nimport IconButton from '@mui/material/IconButton';\nimport InputLabel from '@mui/material/InputLabel';\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport SendIcon from '@mui/icons-material/Send';\n\n\nconst LoginUser = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('This field is required'),\n    password: Yup.string().min(6, 'Too short!').required('This field is required'),\n});\n\n\nexport const LoginForm = () => {\n    const [showPassword, setShowPassword] = React.useState(false);\n    const dispatch = useDispatch();\n\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n        },\n        validationSchema: LoginUser,\n        onSubmit: (values) => {\n            dispatch(logIn(values));\n            formik.resetForm();\n        },\n    });\n\n\n   \n\n    const handleClickShowPassword = () => setShowPassword((show) => !show);\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n   \n\n    return (\n        <div>\n\n                <form onSubmit={formik.handleSubmit} autoComplete=\"off\" >\n                   \n                    <TextField\n                        fullWidth\n                        id=\"email\"\n                        name=\"email\"\n                        label=\"Email\"\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        value={formik.values.email}\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        error={formik.touched.email && Boolean(formik.errors.email)}\n                        helperText={formik.touched.email && formik.errors.email}\n                    />\n\n                        \n                    <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\n                        <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\n                        <OutlinedInput\n                            id=\"password\"\n                            name=\"password\"\n                            type={showPassword ? 'text' : 'password'}\n                            value={formik.values.password}\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            error={formik.touched.password && Boolean(formik.errors.password)}\n                            endAdornment={\n                                <InputAdornment position=\"end\">\n                                    <IconButton\n                                        aria-label=\"toggle password visibility\"\n                                        onClick={handleClickShowPassword}\n                                        onMouseDown={handleMouseDownPassword}\n                                        edge=\"end\"\n                                    >\n                                        {showPassword ? <VisibilityOff /> : <Visibility />}\n                                    </IconButton>\n                                </InputAdornment>\n                            }\n                            label=\"Password\"\n                        />\n                        {formik.touched.password && formik.errors.password && (\n                            <div>{formik.errors.password}</div>\n                        )}\n                    </FormControl>\n\n                    <Button type=\"submit\" variant=\"contained\" endIcon={<SendIcon />} fullWidth>\n                        Submit\n                    </Button>\n                </form>\n            </div>\n        \n    )\n}\n\n\n\n\n\n\n","import { LoginForm } from \"components/LoginForm/LoginForm\";\n\n\n\n\nexport default function LoginFormPage() {\n    return (\n        <>\n            \n            <h1>Log in</h1>\n            <LoginForm  />\n        </>\n    )\n}"],"names":["LoginUser","Yup","shape","email","required","password","min","LoginForm","_React$useState","React","_React$useState2","_slicedToArray","showPassword","setShowPassword","dispatch","useDispatch","formik","useFormik","initialValues","validationSchema","onSubmit","values","logIn","resetForm","_jsx","children","_jsxs","handleSubmit","autoComplete","TextField","fullWidth","id","name","label","variant","margin","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","FormControl","InputLabel","htmlFor","OutlinedInput","type","endAdornment","InputAdornment","position","IconButton","onClick","show","onMouseDown","event","preventDefault","edge","VisibilityOff","Visibility","Button","endIcon","SendIcon","LoginFormPage","_Fragment"],"sourceRoot":""}