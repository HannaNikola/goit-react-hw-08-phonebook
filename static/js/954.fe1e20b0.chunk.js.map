{"version":3,"file":"static/js/954.fe1e20b0.chunk.js","mappings":"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","sources":["components/RegistrForm/RegistrForm.jsx","pages/RegistrFormPage.jsx"],"sourcesContent":["\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { register } from '../../redux/auth/operations';\nimport { useFormik } from 'formik';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport FormControl from '@mui/material/FormControl';\nimport * as React from 'react';\nimport IconButton from '@mui/material/IconButton';\nimport InputLabel from '@mui/material/InputLabel';\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport SendIcon from '@mui/icons-material/Send';\n\n\nconst SignupUser = Yup.object().shape({\n    name: Yup.string().min(3, 'Too short!').required('This field is required'),\n    email: Yup.string().email('Invalid email').required('This field is required'),\n});\n\n\n\nexport const RegistrForm = () => {\n    const [showPassword, setShowPassword] = React.useState(false);\n    const dispatch = useDispatch();\n    \n\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n            email: '',\n            password: '',\n        },\n        validationSchema: SignupUser,\n        onSubmit: (values) => {\n            \n            dispatch(register(values));\n\n        \n        },\n    });\n\n\n\n\n    const handleClickShowPassword = () => setShowPassword((show) => !show);\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n\n\n    return (\n        <div>\n\n            <form onSubmit={formik.handleSubmit} autoComplete=\"off\" >\n\n                <TextField\n                    fullWidth\n                    id=\"name\"\n                    name=\"name\"\n                    label=\"Name\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    value={formik.values.name}\n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                    error={formik.touched.name && Boolean(formik.errors.name)}\n                    helperText={formik.touched.name && formik.errors.name}\n                />\n\n\n                <TextField\n                    fullWidth\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Email\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    value={formik.values.email}\n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                    error={formik.touched.email && Boolean(formik.errors.email)}\n                    helperText={formik.touched.email && formik.errors.email}\n                />\n\n\n                <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\n                    <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\n                    <OutlinedInput\n                        id=\"password\"\n                        name=\"password\"\n                        type={showPassword ? 'text' : 'password'}\n                        value={formik.values.password}\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        error={formik.touched.password && Boolean(formik.errors.password)}\n                        endAdornment={\n                            <InputAdornment position=\"end\">\n                                <IconButton\n                                    aria-label=\"toggle password visibility\"\n                                    onClick={handleClickShowPassword}\n                                    onMouseDown={handleMouseDownPassword}\n                                    edge=\"end\"\n                                >\n                                    {showPassword ? <VisibilityOff /> : <Visibility />}\n                                </IconButton>\n                            </InputAdornment>\n                        }\n                        label=\"Password\"\n                    />\n                    {formik.touched.password && formik.errors.password && (\n                        <div>{formik.errors.password}</div>\n                    )}\n                </FormControl>\n\n                <Button type=\"submit\" variant=\"contained\" endIcon={<SendIcon />} fullWidth>\n                    Submit\n                </Button>\n            </form>\n            \n        </div>\n\n    )\n\n}\n\n\n\n\n","import { RegistrForm } from '../components/RegistrForm/RegistrForm';\n\nexport default function RegistrFormPage() {\n    return (\n        <>\n            <RegistrForm />\n        </>\n    )\n}\n"],"names":["SignupUser","Yup","shape","name","min","required","email","RegistrForm","_React$useState","React","_React$useState2","_slicedToArray","showPassword","setShowPassword","dispatch","useDispatch","formik","useFormik","initialValues","password","validationSchema","onSubmit","values","register","_jsx","children","_jsxs","handleSubmit","autoComplete","TextField","fullWidth","id","label","variant","margin","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","FormControl","InputLabel","htmlFor","OutlinedInput","type","endAdornment","InputAdornment","position","IconButton","onClick","show","onMouseDown","event","preventDefault","edge","VisibilityOff","Visibility","Button","endIcon","SendIcon","RegistrFormPage","_Fragment"],"sourceRoot":""}