{"version":3,"file":"static/js/359.5c3c0637.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","store/Selectors.js","components/ContactForm/ContactForm.jsx","../node_modules/nanoid/index.browser.js","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","Pages/ContactPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, ErrorMessage, Field} from 'formik';\n\n\n\nexport const StyleForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  padding: 10px;\n  gap: ${p => p.theme.spacing(2)};\n  margin: auto;\n`;\n\nexport const InputStyle = styled(Field)`\n  padding: 5px;\n \n`;\n\n\nexport const Box = styled.div`\n  border: 1px solid #1e88e5cf;\n  width: 500px;\n  padding: 50px;\n`;\n\nexport const ButtonAdd = styled.button`\n  font-size: 20px;\n  color: white;\n  padding: 5px 10px;\n  background-color: #1e88e5cf;\n  border: 1px solid transparent;\n  border-radius: 5px;\n  width: 300px;\n  margin-top: 20px;\n  margin-bottom: 15px;\n\n  &:hover {\n    color: red;\n  }\n`;\n\nexport const StyleError = styled(ErrorMessage)`\ncolor: red;\n`;","export const selectContacts = state => state.contact.contacts.items;\n\n\nexport const selectFilter = state => state.filter.filter;","\n\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { StyleForm, ButtonAdd, StyleError, InputStyle, Box } from './ContactForm.styled';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'store/Selectors';\nimport { addContactApi } from 'store/reducerContactSlice';\n\n\n\nconst phonebookSchema = Yup.object().shape({\n    name: Yup.string().min(3, 'Too short!').required('This field is required'),\n    number: Yup.number().min(6, 'Too short!').required('This field is required'),\n\n});\n\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n    \n    const contacts = useSelector(selectContacts);\n\n\n    const generateId = () => {\n        return nanoid();\n    };\n\n    const addContactHandle = async (newContact) => {\n        const name = newContact.name;\n\n        if (contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n            alert(`${name} :you have this number in your Phone Book.`);\n            return;\n        }\n\n        const contactWithId = { ...newContact, id: generateId() };\n        try {\n            await dispatch(addContactApi(contactWithId))\n        } catch (error) {\n            console.error('Mistake',error)\n        }\n        \n        \n\n    }\n\n\n\n\n    return (\n        <Box>\n            <Formik\n                initialValues={{\n                    name: '',\n                    number: '',\n                }}\n\n                validationSchema={phonebookSchema}\n                onSubmit={(values, actions) => {\n\n                    addContactHandle(values);\n                    actions.resetForm();\n                }}\n\n            >\n\n                <StyleForm>\n                    <label htmlFor=\"name\">Name</label>\n                    <InputStyle id=\"name\" name=\"name\" />\n                    <StyleError name=\"name\" component=\"div\" />\n\n\n                    <label type=\"tel\" htmlFor=\"number\">Number</label>\n                    <InputStyle id=\"s\" name=\"number\" />\n                    <StyleError name=\"number\" component=\"div\" />\n\n                    <ButtonAdd type=\"submit\">Add contact</ButtonAdd>\n                </StyleForm>\n\n            </Formik>\n        </Box>\n    );\n};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\n \nexport const DivBox = styled.div`\n  margin-bottom: 40px;\n  margin-top: 40px;\n`;\n\nexport const Title = styled.p`\n  font-size: 25px;\n  font-family: 'Segoe UI';\n  color: #1e88e5cf;\n`;\n\nexport const InputFilter = styled.input`\n  margine: auto;\n  width: 300px;\n  padding: 5px;\n  \n`;","import { useDispatch, useSelector } from \"react-redux\";\nimport { Title, InputFilter, DivBox } from \"./Filter.styled\"\nimport { FILTER_CONTACT } from \"store/reducerFilterSlice\";\nimport { selectFilter } from \"store/Selectors\";\n\n\nexport const FilterName = () => {\n    const dispatch = useDispatch();\n    \n    const filter = useSelector(selectFilter);\n\n    const handleFilterChange = (event) => {\n        const filterValue = event.target.value.toLowerCase();\n\n\n        dispatch(FILTER_CONTACT(filterValue));\n\n    };\n\n\n\n\n\n\n    return (\n        <DivBox>\n            <Title>Find contacts by Name</Title>\n            <label htmlFor=\"filter\"> </label>\n            <InputFilter\n                type=\"text\"\n                id=\"filter\"\n                value={filter}\n                onChange={handleFilterChange}\n            />\n        </DivBox>\n    )\n\n\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 700px;\n`;\n\nexport const ListItem = styled.li`\n  font-family: -apple-system;\n  font-weight: 400;\n  font-size: 25px;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 15px;\n  :hover {\n    color: blue;\n  }\n`;\n\nexport const ButtonDelete = styled.button`\n  font-size: 20px;\n  color: white;\n  padding: 5px 10px;\n  background-color: #1e88e5cf;\n  border: 1px solid transparent;\n  border-radius: 10px;\n  width: 130px;\n  \n`;","import { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { List, ListItem, ButtonDelete } from \"./ContactList.styled\";\nimport { selectContacts, selectFilter } from \"store/Selectors\";\nimport { deleteContactApi } from \"store/reducerContactSlice\";\nimport { createSelector } from \"reselect\"; \n\n\nconst selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  const deleteContact = async (id) => {\n    try {\n      dispatch(deleteContactApi(id));\n    } catch (error) {\n      console.error('Mistake', error);\n    }\n  };\n\n  return (\n    <List>\n      {filteredContacts.map((contact) => (\n        <ListItem key={contact.id}>\n          {contact.name}: {contact.number}\n          <ButtonDelete onClick={() => deleteContact(contact.id)}>Delete</ButtonDelete>\n        </ListItem>\n      ))}\n    </List>)\n};\n\n\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { FilterName } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\n\nexport default function ContactPage() {\n    return (\n        <>\n            <h1>Phonebook</h1>\n            <ContactForm />\n            <h2>Contacts</h2>\n            <FilterName />\n            <ContactList />\n        </>\n    )\n}"],"names":["StyleForm","styled","Form","_templateObject","_taggedTemplateLiteral","p","theme","spacing","InputStyle","Field","_templateObject2","Box","_templateObject3","ButtonAdd","_templateObject4","StyleError","ErrorMessage","_templateObject5","selectContacts","state","contact","contacts","items","selectFilter","filter","phonebookSchema","Yup","shape","name","min","required","number","ContactForm","dispatch","useDispatch","useSelector","generateId","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","nanoid","addContactHandle","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","newContact","contactWithId","_context","prev","next","some","toLowerCase","alert","concat","abrupt","_objectSpread","addContactApi","t0","console","error","stop","_x","apply","_jsx","children","Formik","initialValues","validationSchema","onSubmit","values","actions","resetForm","_jsxs","htmlFor","component","type","DivBox","Title","InputFilter","FilterName","value","onChange","event","filterValue","target","FILTER_CONTACT","List","ListItem","ButtonDelete","selectVisibleContacts","createSelector","includes","ContactList","filteredContacts","deleteContact","deleteContactApi","map","onClick","ContactPage","_Fragment"],"sourceRoot":""}